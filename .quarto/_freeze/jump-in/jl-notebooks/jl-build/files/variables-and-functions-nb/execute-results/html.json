{
  "hash": "29fc66702427611ad2207c15cc4132a2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Variables and Functions - Notebook\"\nnavtitle: \"Variables and Functions (INB)\"\nsubtitle: \"Interactive notebook introducing variables and functions\"\ndescription: \"Interactive notebook with Python to get started with variables and functions.\"\nformat:\n  html:\n    page-layout: full\n    title-block-banner: true\n---\n\n## Hello World\n\nAny programmer knows, the first test to show if you know a language it printing `Hello, World!`\n\nThis **interactive** notebook uses only pure Python, no external resources to get started.\n\nTopics covered:\n\n- Hello World\n- Types (int, float, str, bool, list, dict, set, tuple)\n- Variables & assignment\n- Operators (arithmetic, comparison, logical)\n\n::: {#4a0a1a81-b8de-475b-ab4e-b0dac128fbcb .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\nThere are two parts to the syntax above:\n- `print` is a builtin function\n- \"Hello, World!\" is a string\n\nWhen `print` is given a single, string argument like above, it displays that input.\n\nNext, give yourself a little praise, you're on your way to mastering Python and more.\n\nSet up two `variables` to work with:\n- `compliment`\n- `name`\n\n::: {#4f4d9c0c-1658-4b1c-9fc8-6a023524d440 .cell execution_count=2}\n``` {.python .cell-code}\ncompliment = \"Great work\"\n```\n:::\n\n\n::: {#fc4a9c56-0b70-4109-b093-dfc8f87b2878 .cell execution_count=3}\n``` {.python .cell-code}\nname = \"Your name here\"\n```\n:::\n\n\n::: {#39a5ab1e-2577-42d6-82c0-22ac27c0d00d .cell execution_count=4}\n``` {.python .cell-code}\nprint(compliment)\nprint(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat work\nYour name here\n```\n:::\n:::\n\n\n### Working with Variables\n\nVariables are essential to programming. A variable creates a named container for information.\n\nVariable names can only contain letters, digits, and underscores, must start with a letter or underscore, and can’t be a reserved word (e.g., `if`, `def`, `return`).\n\nIn Python, use `=` to assign values: `x = 5`.\n\nCreating and working with variables makes programming much easier! \n\nIt creates a reusable, custom name.\n\n::: {#d1d06ab7-14a4-4902-a7c8-c2426d9ddba1 .cell execution_count=5}\n``` {.python .cell-code}\nprint(compliment)\nprint(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat work\nYour name here\n```\n:::\n:::\n\n\nSomething about the above looks off...\n\nIt should be on one line. \n\n::: {#ef16bc50-7c0b-4528-97a7-23ff0ffc229e .cell execution_count=6}\n``` {.python .cell-code}\ncompliment_and_name = compliment + name\n```\n:::\n\n\n::: {#e6a40f51-bfe6-40cb-a598-d8bf751e1669 .cell execution_count=7}\n``` {.python .cell-code}\nprint(compliment_and_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat workYour name here\n```\n:::\n:::\n\n\nStill not quite right...\n\n::: {#e091f417-2140-4852-8cb9-0fde23ec04a1 .cell execution_count=8}\n``` {.python .cell-code}\ncompliment_and_name_2 = compliment +', '+ name\n```\n:::\n\n\n::: {#43dc132f-8fa9-4486-8c40-3eaa7e3434db .cell execution_count=9}\n``` {.python .cell-code}\nprint(compliment_and_name_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat work, Your name here\n```\n:::\n:::\n\n\nWith feeling!\n\n::: {#474aa379-01b5-49bd-a791-0910136a51fd .cell execution_count=10}\n``` {.python .cell-code}\ncompliment_and_name_3 = compliment_and_name_2 +'!'\n```\n:::\n\n\n::: {#6ce19826-9569-4209-a6fb-3523457df243 .cell execution_count=11}\n``` {.python .cell-code}\nprint(compliment_and_name_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat work, Your name here!\n```\n:::\n:::\n\n\n### Variable Review\n\nNow you have not only created variables you concatenated them with an operator `+`.\n\nKnowing how to manipulate variables is key to understanding programming.\n\n| **Example**       | **Valid?** | **Reason**                                                   |\n| ----------------- | ---------- | ------------------------------------------------------------ |\n| `age`        | ✅ Yes      | Starts with a letter, letters only                           |\n| `user_name` | ✅ Yes      | Letters + underscore are allowed                             |\n| `temperature2`    | ✅ Yes      | Digits allowed, but not at start                             |\n| `_hidden`         | ✅ Yes      | Leading underscore allowed (often used for “private” values) |\n| `MAX_VALUE`       | ✅ Yes      | Uppercase is allowed, often used for constants               |\n| `2nd_value`       | ❌ No       | Cannot start with a digit                                    |\n| `user-name`       | ❌ No       | Dash (`-`) not allowed                                       |\n| `file.path`       | ❌ No       | Dot (`.`) means “attribute,” not part of a name              |\n| `my var`          | ❌ No       | Spaces not allowed                                           |\n| `return`      | ❌ No       | `return` is a reserved Python keyword                        |\n\n## Datatypes\n\n| **Category** | **Type**    | **Example**            |\n| ------------ | ----------- | ---------------------- |\n| Numbers      | `int`       | `42`                   |\n|              | `float`     | `3.14`                 |\n|              | `complex`   | `2 + 3j`               |\n| Text         | `str`       | `\"hello\"`              |\n| Sequences    | `list`      | `[1, 2, 3]`            |\n|              | `tuple`     | `(1, 2, 3)`            |\n|              | `range`     | `range(5)`             |\n| Sets         | `set`       | `{1, 2, 3}`            |\n|              | `frozenset` | `frozenset([1, 2, 3])` |\n| Mappings     | `dict`      | `{\"a\": 1, \"b\": 2}`     |\n| Boolean      | `bool`      | `True`, `False`        |\n| Special      | `NoneType`  | `None`                 |\n\n\n",
    "supporting": [
      "variables-and-functions-nb_files"
    ],
    "filters": [],
    "includes": {}
  }
}