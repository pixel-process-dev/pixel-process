{"title":"Visualization Building Blocks","markdown":{"yaml":{"title":"Visualization Building Blocks","navtitle":"Data Viz Building Blocks","subtitle":"Building Images: Figures, Axes, and More","description":"Core concepts in matplotlib, seaborn, and plotly for figures, axes, colors, and templates/themes. Includes key differences and common pitfalls when switching libraries.","slug":"data-viz-building-blocks","tags":["data-visualization","matplotlib","seaborn","plotly"]},"headingText":"Figure","containsRefs":false,"markdown":"\n\nEstablish terminology for building figures with comparisons of matplotlib, seaborn, and plotly. \n\n**Bonus**: Aviod common pitfalls\n\n\n**Figure**: The overall container that holds everything in a visualization, including one or more plots/axes. \n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nCreated with `plt.figure()` or implicitly with `plt.subplots()`. Acts as the top-level container for all axes and elements.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nWraps matplotlib; figure objects are matplotlib figures. Many seaborn functions automatically create a figure.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nCreated with `go.Figure()` or `make_subplots()`. Serves as the top-level object to which traces and layout are added.</div>\n</div>\n\n#### Pitfalls\n\nIn matplotlib/seaborn, you usually need `plt.show()` in scripts to render; in notebooks it auto-displays. In plotly, you must call `fig.show()`. Seaborn may create its own figure silently if you don’t pass `ax=...`. Plotly figures are interactive by default, while matplotlib’s are static unless combined with widgets.\n\n### Axes\n\n**Axes**: A single plotting area within a figure (what most people think of as 'the plot').\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nCreated with `fig.add_subplot()` or `plt.subplots()`. Each Axes has its own coordinate system, ticks, and labels.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nAlways returns a matplotlib `Axes` (or FacetGrid/PairGrid, which manages multiple Axes). Seaborn’s high-level API plots directly onto Axes objects.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nDoesn’t use an explicit 'Axes' object. Instead, axes are defined by layout (`fig.update_xaxes`, `fig.update_yaxes`). Multiple subplots are managed through layout specs.</div>\n</div>\n\n#### Pitfalls\n\nTerminology confusion: 'Axes' (plural of 'Axis') vs 'Axis' (x/y scale). In seaborn, calling multiple functions on the same Axes requires passing `ax=...`; otherwise each call may create a new figure. In plotly, axis limits and labels are adjusted via layout updates, not per-object methods.\n\n### Color Palettes\n\n**Color Palette**: Collection of colors used to distinguish categories or continuous values.\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nUses 'colormaps' (`cmap`) for continuous data (e.g., `viridis`, `plasma`) and 'color cycles' for categorical data.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nBuilt-in support for categorical palettes (`color_palette('deep')`), sequential/diverging palettes (`cubehelix_palette`, `light_palette`), and wrappers for matplotlib colormaps.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nSupports `color_discrete_sequence` for categorical colors and `colorscale` for continuous values. Many named scales available (`Viridis`, `Cividis`, `Plasma`).</div>\n</div>\n\n#### Pitfalls\n\nIn matplotlib, `cmap` is only for continuous values; using it for categories requires manual mapping. Seaborn will override matplotlib’s default color cycle when you call `sns.set_theme()`. Plotly distinguishes between discrete (`color_discrete_sequence`) and continuous (`colorscale`); passing the wrong one has no effect.\n\n### Templates / Styles\n\n**Templates / Styles**: Preset styling that controls background, grids, font, and overall look of plots.\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nUses 'colormaps' (`cmap`) for continuous data (e.g., `viridis`, `plasma`) and 'color cycles' for categorical data.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nThemes via `sns.set_theme(style='whitegrid')`. Controls background, ticks, grid, font scale, etc.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nTemplates applied with `fig.update_layout(template='plotly_dark')`. Includes built-in templates (`plotly`, `ggplot2`, `seaborn`) or user-defined ones.</div>\n</div>\n\n#### Pitfalls\n\nMatplotlib stylesheets affect all following plots unless reset — beginners often forget to reset. Seaborn’s `set_theme` changes matplotlib defaults globally (grids, ticks, etc.), which may surprise users mixing raw matplotlib code. Plotly templates override both colors and layout; you may need to re-apply custom settings after applying a template.\n","srcMarkdownNoYaml":"\n\nEstablish terminology for building figures with comparisons of matplotlib, seaborn, and plotly. \n\n**Bonus**: Aviod common pitfalls\n\n### Figure\n\n**Figure**: The overall container that holds everything in a visualization, including one or more plots/axes. \n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nCreated with `plt.figure()` or implicitly with `plt.subplots()`. Acts as the top-level container for all axes and elements.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nWraps matplotlib; figure objects are matplotlib figures. Many seaborn functions automatically create a figure.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nCreated with `go.Figure()` or `make_subplots()`. Serves as the top-level object to which traces and layout are added.</div>\n</div>\n\n#### Pitfalls\n\nIn matplotlib/seaborn, you usually need `plt.show()` in scripts to render; in notebooks it auto-displays. In plotly, you must call `fig.show()`. Seaborn may create its own figure silently if you don’t pass `ax=...`. Plotly figures are interactive by default, while matplotlib’s are static unless combined with widgets.\n\n### Axes\n\n**Axes**: A single plotting area within a figure (what most people think of as 'the plot').\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nCreated with `fig.add_subplot()` or `plt.subplots()`. Each Axes has its own coordinate system, ticks, and labels.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nAlways returns a matplotlib `Axes` (or FacetGrid/PairGrid, which manages multiple Axes). Seaborn’s high-level API plots directly onto Axes objects.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nDoesn’t use an explicit 'Axes' object. Instead, axes are defined by layout (`fig.update_xaxes`, `fig.update_yaxes`). Multiple subplots are managed through layout specs.</div>\n</div>\n\n#### Pitfalls\n\nTerminology confusion: 'Axes' (plural of 'Axis') vs 'Axis' (x/y scale). In seaborn, calling multiple functions on the same Axes requires passing `ax=...`; otherwise each call may create a new figure. In plotly, axis limits and labels are adjusted via layout updates, not per-object methods.\n\n### Color Palettes\n\n**Color Palette**: Collection of colors used to distinguish categories or continuous values.\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nUses 'colormaps' (`cmap`) for continuous data (e.g., `viridis`, `plasma`) and 'color cycles' for categorical data.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nBuilt-in support for categorical palettes (`color_palette('deep')`), sequential/diverging palettes (`cubehelix_palette`, `light_palette`), and wrappers for matplotlib colormaps.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nSupports `color_discrete_sequence` for categorical colors and `colorscale` for continuous values. Many named scales available (`Viridis`, `Cividis`, `Plasma`).</div>\n</div>\n\n#### Pitfalls\n\nIn matplotlib, `cmap` is only for continuous values; using it for categories requires manual mapping. Seaborn will override matplotlib’s default color cycle when you call `sns.set_theme()`. Plotly distinguishes between discrete (`color_discrete_sequence`) and continuous (`colorscale`); passing the wrong one has no effect.\n\n### Templates / Styles\n\n**Templates / Styles**: Preset styling that controls background, grids, font, and overall look of plots.\n\n<div class=\"category-grid\">\n<div class=\"category-card\">\n<h3>matplotlib</h3>\nUses 'colormaps' (`cmap`) for continuous data (e.g., `viridis`, `plasma`) and 'color cycles' for categorical data.</div>\n<div class=\"category-card\">\n<h3>seaborn</h3>\nThemes via `sns.set_theme(style='whitegrid')`. Controls background, ticks, grid, font scale, etc.</div>\n<div class=\"category-card\">\n<h3>plotly</h3>\nTemplates applied with `fig.update_layout(template='plotly_dark')`. Includes built-in templates (`plotly`, `ggplot2`, `seaborn`) or user-defined ones.</div>\n</div>\n\n#### Pitfalls\n\nMatplotlib stylesheets affect all following plots unless reset — beginners often forget to reset. Seaborn’s `set_theme` changes matplotlib defaults globally (grids, ticks, etc.), which may surprise users mixing raw matplotlib code. Plotly templates override both colors and layout; you may need to re-apply custom settings after applying a template.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../assets/css/tokens.css","../../assets/css/themes.css","../../assets/css/body-bg.css","../../assets/css/navbar.css","../../assets/css/sidebar.css","../../assets/css/toc.css","../../assets/css/links.css","../../assets/css/headers.css","../../assets/css/footer.css","../../assets/css/title-block.css","../../assets/css/code-blocks.css","../../assets/css/code-blocks-interactive.css","../../assets/css/custom-callouts.css","../../assets/css/category-grid.css","../../assets/css/tab-cards.css","../../assets/css/flipbook.css","../../assets/css/tables.css","../../assets/css/faqs.css","../../assets/css/buttons.css","../../assets/css/quick-links.css","../../assets/css/branding.css"],"include-after-body":["../../assets/html/wip-footer.html","../../assets/html/custom-footer.html"],"toc":true,"output-file":"data-viz-building-blocks.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly","dark":"darkly"},"google-fonts":["Inter"],"page-layout":"full","code-copy":true,"title-block-banner":true,"plotly":true,"sidebar":"foundations","title":"Visualization Building Blocks","navtitle":"Data Viz Building Blocks","subtitle":"Building Images: Figures, Axes, and More","description":"Core concepts in matplotlib, seaborn, and plotly for figures, axes, colors, and templates/themes. Includes key differences and common pitfalls when switching libraries.","slug":"data-viz-building-blocks","tags":["data-visualization","matplotlib","seaborn","plotly"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}