{"title":"Errors and Experimentation","markdown":{"yaml":{"title":"Errors and Experimentation","subtitle":"Essential Concepts for New Python Users","description":"Jump into notebooks, syntax, error handling, and core concepts.","slug":"errors-and-experimentation","tags":["python","beginners","jupyter","syntax"]},"headingText":"Getting Started with Python","containsRefs":false,"markdown":"\n\n\nThis guide introduces core Python concepts in a hands-on way, using **Jupyter notebooks** as the primary environment. You'll learn about variables, data types, basic syntax, error messages, and more. All in base Python, package use will come later.\n\n::: {.callout icon=\"none\" .custom-callout .pxp-ref title=\"Jupyter Notebooks\"}\n\nNotebooks are a great way to learn and collaborate with code. Be sure to check out [Jupyter Notebooks]({{{jupyter-noteobooks}}}) if you are unfamiliar with them, as they are heavily used in this project.\n:::\n\n\n## Python Parts\n\nBefore jumping into the code, we'll cover the core pieces, pixels if you will, that Python is built upon. Many of these concepts are similar in other languages as well.\n\n- **Datatypes**\n- **Operators**\n- **Reserved Words**\n- **Builtin Functions**\n- **Variables**\n- **Flow Controls**\n\n### Datatypes\n\nPython uses datatypes to organize and process information. The datatype can determine how much data is stored, used, and displayed. Picking the right datatype for a use-case makes coding much smoother. Key catergories include numeric, strings, and sequences.\n\n<div class=\"table-cheatsheet\">\n| Category | Type | Example |\n| --- | --- | --- |\n| Numbers | int | 42 |\n| Numbers | float | 3.14 |\n| Numbers | complex | 2 + 3j |\n| Text | str | \"hello\" |\n| Sequences | list | [1, 2, 3] |\n| Sequences | tuple | (1, 2, 3) |\n| Sequences | range | range(5) |\n| Sets | set | {1, 2, 3} |\n| Sets | frozenset | frozenset([1, 2, 3]) |\n| Mappings | dict | {\"a\": 1, \"b\": 2} |\n| Boolean | bool | True, False |\n| Special | NoneType | None |\n\n</div>\n\n\n### Operators\n\nOperations in programming are used to manipulate and evaluate values. These allow programs to perform calculations, make decisions, and control the flow of execution. \nTypes include:\n\n- **Mathematical**\n- **Logical**\n- **Comparison**\n- **Assignment**\n\n\n#### Mathematical\n\nMathematical operators perform arithmetic calculations. In Python, these include `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), `**` or `^` (exponentiation), and `%` or `%%` (modulus). Python uses `//` for integer division.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| + | 3 + 2 | Addition | 5 |\n| - | 7 - 4 | Subtraction | 3 |\n| * | 6 * 2 | Multiplication | 12 |\n| / | 7 / 2 | Division (always float) | 3.5 |\n| // | 7 // 2 | Floor (integer) division | 3 |\n| % | 7 % 2 | Modulus (remainder) | 1 |\n| ** | 2 ** 3 | Exponentiation | 8 |\n\n</div>\n\n\n#### Comparison\n\nComparison operators evaluate relationships between values. Common operators in Python include `==` (equal), `!=` (not equal), `<` (less than), `<=` (less than or equal to), `>` (greater than), and `>=` (greater than or equal to).\n\nThese return boolean values of `True`/`False`.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| == | 3 == 3 | Equal to | True |\n| != | 3 != 4 | Not equal to | True |\n| > | 5 > 2 | Greater than | True |\n| < | 2 < 5 | Less than | True |\n| >= | 5 >= 5 | Greater than or equal to | True |\n| <= | 4 <= 5 | Less than or equal to | True |\n\n</div>\n\n\n#### Logical\n\nLogical operators allow for boolean logic. In Python: `and`, `or`, `not`. These are used in conditionals and loops to combine multiple logical expressions.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| and | (3 > 1) and (2 < 5) | True if both are true | True |\n| or | (3 > 1) or (2 > 5) | True if at least one is true | True |\n| not | not (3 > 1) | Negates (True → False) | False |\n\n</div>\n\n\n::: {.callout icon=\"none\" .custom-callout .best-practice title=\"Assignment and Equality\"}\n\nAssignment uses `=` to assign a value to a variable. `x = 10` creates or updates the variable x to be 10.\n\nEquality checking uses `==` and returns a Boolean (True, or False) depending on if the values are equal. `x == 10` will return True if x is set as above. \n:::\n\n\n### Variables and Functions\n\nEffective programming is built around reusable variables and code snippets like functions, classes, and methods. We'll explore this more in-depth throughout the project.\n\n#### Variables\n\nVariable assignment stores data in a named container. In Python, use `=` to assign values: `x = 5`. Variables are case-sensitive and can store numbers, strings, lists, and other datatypes. Variables in Python are **mutable** meaning the value can be modified.\n\n<div class=\"table-cheatsheet\">\n| Example | Valid? | Reason |\n| --- | --- | --- |\n| age = 25 | ✅ Yes | Starts with a letter, letters only |\n| user_name = \"A\" | ✅ Yes | Letters + underscore are allowed |\n| temperature2 | ✅ Yes | Digits allowed, but not at start |\n| _hidden | ✅ Yes | Leading underscore allowed (often used for “private” values) |\n| MAX_VALUE | ✅ Yes | Uppercase is allowed, often used for constants |\n| 2nd_value | ❌ No | Cannot start with a digit |\n| user-name | ❌ No | Dash (-) not allowed |\n| file.path | ❌ No | Dot (.) means “attribute,” not part of a name |\n| my var | ❌ No | Spaces not allowed |\n| return = 5 | ❌ No | return is a reserved Python keyword |\n\n</div>\n\n\n#### Functions\n\nFunctions create reusable code which can simplify tasks, allow iterative runs, and can make your code **much** more powerful. Python comes with some [builtin functions](https://docs.python.org/3/library/functions.html) which will help demonstrate. To begin, let's focus on:\n- **`print`**: display the passed argument \n- **type**: returns the type of the passed argument\n- **help**: returns documentation and help files of passed argument\n- **Assignment**\n\n\n<hr class=\"page-divider\">\n\n## Control Flow\n\nUse `if`, `elif`, and `else` for conditional logic:\n\n```python\nx = 10\nif x > 5:\n    print(\"Large\")\nelif x == 5:\n    print(\"Exactly 5\")\nelse:\n    print(\"Small\")\n```\n\nYou’ll also see `for` and `while` loops, as well as function definitions like `def greet(name): ...`.\n\n## Common Error Messages\n\nYou’ll encounter errors. That’s normal! Learn to read **tracebacks**.\n\n- `SyntaxError`: Something’s wrong with your code structure.\n- `NameError`: You used a variable that doesn’t exist.\n- `TypeError`: You tried an operation on incompatible types.\n- `IndentationError`: Your code blocks are not properly aligned.\n\n## Combining Concepts\n\nTry this small example to use variables, control flow, and output:\n\n```python\nscore = 87\nif score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelse:\n    grade = 'C or below'\n\nprint(f\"Your grade: {grade}\")\n```\n\n### VARIABLE NAMING\n\n<div class=\"table-cheatsheet\">\n| Example | Valid? | Reason |\n| --- | --- | --- |\n| age = 25 | ✅ Yes | Starts with a letter, letters only |\n| user_name = \"A\" | ✅ Yes | Letters + underscore are allowed |\n| temperature2 | ✅ Yes | Digits allowed, but not at start |\n| _hidden | ✅ Yes | Leading underscore allowed (often used for “private” values) |\n| MAX_VALUE | ✅ Yes | Uppercase is allowed, often used for constants |\n| 2nd_value | ❌ No | Cannot start with a digit |\n| user-name | ❌ No | Dash (-) not allowed |\n| file.path | ❌ No | Dot (.) means “attribute,” not part of a name |\n| my var | ❌ No | Spaces not allowed |\n| return = 5 | ❌ No | return is a reserved Python keyword |\n\n</div>\n\n\n### OPERATIONS\n\nCheck if tables work.\n\n::: {.panel-tabset}\n\n#### Operators - Arithmetic\n::: {.table-cheatsheet}\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| + | 3 + 2 | Addition | 5 |\n| - | 7 - 4 | Subtraction | 3 |\n| * | 6 * 2 | Multiplication | 12 |\n| / | 7 / 2 | Division (always float) | 3.5 |\n| // | 7 // 2 | Floor (integer) division | 3 |\n| % | 7 % 2 | Modulus (remainder) | 1 |\n| ** | 2 ** 3 | Exponentiation | 8 |\n:::\n#### Operators - Comparison\n::: {.table-cheatsheet}\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| == | 3 == 3 | Equal to | True |\n| != | 3 != 4 | Not equal to | True |\n| > | 5 > 2 | Greater than | True |\n| < | 2 < 5 | Less than | True |\n| >= | 5 >= 5 | Greater than or equal to | True |\n| <= | 4 <= 5 | Less than or equal to | True |\n:::\n:::\n","srcMarkdownNoYaml":"\n\n## Getting Started with Python\n\nThis guide introduces core Python concepts in a hands-on way, using **Jupyter notebooks** as the primary environment. You'll learn about variables, data types, basic syntax, error messages, and more. All in base Python, package use will come later.\n\n::: {.callout icon=\"none\" .custom-callout .pxp-ref title=\"Jupyter Notebooks\"}\n\nNotebooks are a great way to learn and collaborate with code. Be sure to check out [Jupyter Notebooks]({{{jupyter-noteobooks}}}) if you are unfamiliar with them, as they are heavily used in this project.\n:::\n\n\n## Python Parts\n\nBefore jumping into the code, we'll cover the core pieces, pixels if you will, that Python is built upon. Many of these concepts are similar in other languages as well.\n\n- **Datatypes**\n- **Operators**\n- **Reserved Words**\n- **Builtin Functions**\n- **Variables**\n- **Flow Controls**\n\n### Datatypes\n\nPython uses datatypes to organize and process information. The datatype can determine how much data is stored, used, and displayed. Picking the right datatype for a use-case makes coding much smoother. Key catergories include numeric, strings, and sequences.\n\n<div class=\"table-cheatsheet\">\n| Category | Type | Example |\n| --- | --- | --- |\n| Numbers | int | 42 |\n| Numbers | float | 3.14 |\n| Numbers | complex | 2 + 3j |\n| Text | str | \"hello\" |\n| Sequences | list | [1, 2, 3] |\n| Sequences | tuple | (1, 2, 3) |\n| Sequences | range | range(5) |\n| Sets | set | {1, 2, 3} |\n| Sets | frozenset | frozenset([1, 2, 3]) |\n| Mappings | dict | {\"a\": 1, \"b\": 2} |\n| Boolean | bool | True, False |\n| Special | NoneType | None |\n\n</div>\n\n\n### Operators\n\nOperations in programming are used to manipulate and evaluate values. These allow programs to perform calculations, make decisions, and control the flow of execution. \nTypes include:\n\n- **Mathematical**\n- **Logical**\n- **Comparison**\n- **Assignment**\n\n\n#### Mathematical\n\nMathematical operators perform arithmetic calculations. In Python, these include `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), `**` or `^` (exponentiation), and `%` or `%%` (modulus). Python uses `//` for integer division.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| + | 3 + 2 | Addition | 5 |\n| - | 7 - 4 | Subtraction | 3 |\n| * | 6 * 2 | Multiplication | 12 |\n| / | 7 / 2 | Division (always float) | 3.5 |\n| // | 7 // 2 | Floor (integer) division | 3 |\n| % | 7 % 2 | Modulus (remainder) | 1 |\n| ** | 2 ** 3 | Exponentiation | 8 |\n\n</div>\n\n\n#### Comparison\n\nComparison operators evaluate relationships between values. Common operators in Python include `==` (equal), `!=` (not equal), `<` (less than), `<=` (less than or equal to), `>` (greater than), and `>=` (greater than or equal to).\n\nThese return boolean values of `True`/`False`.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| == | 3 == 3 | Equal to | True |\n| != | 3 != 4 | Not equal to | True |\n| > | 5 > 2 | Greater than | True |\n| < | 2 < 5 | Less than | True |\n| >= | 5 >= 5 | Greater than or equal to | True |\n| <= | 4 <= 5 | Less than or equal to | True |\n\n</div>\n\n\n#### Logical\n\nLogical operators allow for boolean logic. In Python: `and`, `or`, `not`. These are used in conditionals and loops to combine multiple logical expressions.\n\n<div class=\"table-cheatsheet\">\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| and | (3 > 1) and (2 < 5) | True if both are true | True |\n| or | (3 > 1) or (2 > 5) | True if at least one is true | True |\n| not | not (3 > 1) | Negates (True → False) | False |\n\n</div>\n\n\n::: {.callout icon=\"none\" .custom-callout .best-practice title=\"Assignment and Equality\"}\n\nAssignment uses `=` to assign a value to a variable. `x = 10` creates or updates the variable x to be 10.\n\nEquality checking uses `==` and returns a Boolean (True, or False) depending on if the values are equal. `x == 10` will return True if x is set as above. \n:::\n\n\n### Variables and Functions\n\nEffective programming is built around reusable variables and code snippets like functions, classes, and methods. We'll explore this more in-depth throughout the project.\n\n#### Variables\n\nVariable assignment stores data in a named container. In Python, use `=` to assign values: `x = 5`. Variables are case-sensitive and can store numbers, strings, lists, and other datatypes. Variables in Python are **mutable** meaning the value can be modified.\n\n<div class=\"table-cheatsheet\">\n| Example | Valid? | Reason |\n| --- | --- | --- |\n| age = 25 | ✅ Yes | Starts with a letter, letters only |\n| user_name = \"A\" | ✅ Yes | Letters + underscore are allowed |\n| temperature2 | ✅ Yes | Digits allowed, but not at start |\n| _hidden | ✅ Yes | Leading underscore allowed (often used for “private” values) |\n| MAX_VALUE | ✅ Yes | Uppercase is allowed, often used for constants |\n| 2nd_value | ❌ No | Cannot start with a digit |\n| user-name | ❌ No | Dash (-) not allowed |\n| file.path | ❌ No | Dot (.) means “attribute,” not part of a name |\n| my var | ❌ No | Spaces not allowed |\n| return = 5 | ❌ No | return is a reserved Python keyword |\n\n</div>\n\n\n#### Functions\n\nFunctions create reusable code which can simplify tasks, allow iterative runs, and can make your code **much** more powerful. Python comes with some [builtin functions](https://docs.python.org/3/library/functions.html) which will help demonstrate. To begin, let's focus on:\n- **`print`**: display the passed argument \n- **type**: returns the type of the passed argument\n- **help**: returns documentation and help files of passed argument\n- **Assignment**\n\n\n<hr class=\"page-divider\">\n\n## Control Flow\n\nUse `if`, `elif`, and `else` for conditional logic:\n\n```python\nx = 10\nif x > 5:\n    print(\"Large\")\nelif x == 5:\n    print(\"Exactly 5\")\nelse:\n    print(\"Small\")\n```\n\nYou’ll also see `for` and `while` loops, as well as function definitions like `def greet(name): ...`.\n\n## Common Error Messages\n\nYou’ll encounter errors. That’s normal! Learn to read **tracebacks**.\n\n- `SyntaxError`: Something’s wrong with your code structure.\n- `NameError`: You used a variable that doesn’t exist.\n- `TypeError`: You tried an operation on incompatible types.\n- `IndentationError`: Your code blocks are not properly aligned.\n\n## Combining Concepts\n\nTry this small example to use variables, control flow, and output:\n\n```python\nscore = 87\nif score >= 90:\n    grade = 'A'\nelif score >= 80:\n    grade = 'B'\nelse:\n    grade = 'C or below'\n\nprint(f\"Your grade: {grade}\")\n```\n\n### VARIABLE NAMING\n\n<div class=\"table-cheatsheet\">\n| Example | Valid? | Reason |\n| --- | --- | --- |\n| age = 25 | ✅ Yes | Starts with a letter, letters only |\n| user_name = \"A\" | ✅ Yes | Letters + underscore are allowed |\n| temperature2 | ✅ Yes | Digits allowed, but not at start |\n| _hidden | ✅ Yes | Leading underscore allowed (often used for “private” values) |\n| MAX_VALUE | ✅ Yes | Uppercase is allowed, often used for constants |\n| 2nd_value | ❌ No | Cannot start with a digit |\n| user-name | ❌ No | Dash (-) not allowed |\n| file.path | ❌ No | Dot (.) means “attribute,” not part of a name |\n| my var | ❌ No | Spaces not allowed |\n| return = 5 | ❌ No | return is a reserved Python keyword |\n\n</div>\n\n\n### OPERATIONS\n\nCheck if tables work.\n\n::: {.panel-tabset}\n\n#### Operators - Arithmetic\n::: {.table-cheatsheet}\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| + | 3 + 2 | Addition | 5 |\n| - | 7 - 4 | Subtraction | 3 |\n| * | 6 * 2 | Multiplication | 12 |\n| / | 7 / 2 | Division (always float) | 3.5 |\n| // | 7 // 2 | Floor (integer) division | 3 |\n| % | 7 % 2 | Modulus (remainder) | 1 |\n| ** | 2 ** 3 | Exponentiation | 8 |\n:::\n#### Operators - Comparison\n::: {.table-cheatsheet}\n| Operator | Example | Meaning | Result |\n| --- | --- | --- | --- |\n| == | 3 == 3 | Equal to | True |\n| != | 3 != 4 | Not equal to | True |\n| > | 5 > 2 | Greater than | True |\n| < | 2 < 5 | Less than | True |\n| >= | 5 >= 5 | Greater than or equal to | True |\n| <= | 4 <= 5 | Less than or equal to | True |\n:::\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":true,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../assets/css/tokens.css","../assets/css/themes.css","../assets/css/body-bg.css","../assets/css/navbar.css","../assets/css/sidebar.css","../assets/css/toc.css","../assets/css/links.css","../assets/css/headers.css","../assets/css/footer.css","../assets/css/title-block.css","../assets/css/code-blocks.css","../assets/css/code-blocks-interactive.css","../assets/css/custom-callouts.css","../assets/css/category-grid.css","../assets/css/tab-cards.css","../assets/css/flipbook.css","../assets/css/tables.css","../assets/css/faqs.css","../assets/css/buttons.css","../assets/css/quick-links.css","../assets/css/branding.css"],"include-after-body":["../assets/html/wip-footer.html","../assets/html/custom-footer.html"],"toc":true,"filters":["pyodide"],"output-file":"errors-and-experimentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":{"light":"flatly","dark":"darkly"},"google-fonts":["Inter"],"page-layout":"full","code-copy":true,"title-block-banner":true,"plotly":true,"sidebar":"jump-in","jupyter":{"code-cell-processor":"pyodide-python"},"title":"Errors and Experimentation","subtitle":"Essential Concepts for New Python Users","description":"Jump into notebooks, syntax, error handling, and core concepts.","slug":"errors-and-experimentation","tags":["python","beginners","jupyter","syntax"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}